upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B")),
error = function(e) e)
head(pv)
dim(pv)
x
library(mdmd)
fit <- dfcop(X)
model <- models[5,]
model
optim(model$bounds[,2],
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
optim(1.5,
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
optim(1+1e-2,
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
par <- model$bounds[,2]
nll(par,
model$family,
model$rotation)
bla <- seq(1+1e-2,10,1e-2)
bla2 <- sapply(bla, function(par) nll(par,
model$family,
model$rotation))
plot(bla, bla2)
plot(bla, bla2, type = "l")
optim(model$bounds[,2],
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = 20,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
optim(model$bounds[,2],
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = 50,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
library(mdmd)
fit <- dfcop(X)
lls
get_bounds <- function(family) {
switch(family,
indep = c(0, 0, 0),
gaussian = c(0, 0.5, 1),
t = rbind(c(0, 0.5, 1),
c(2, 5, 50)),
clayton = c(0, 1, 200),
gumbel = c(1, 2, 30),
frank = c(0, 1, 50),
joe = c(1, 2, 50),
bb1 = rbind(c(0, 1, 200),
c(1, 2, 200)),
bb6 = rbind(c(1, 2, 200),
c(1, 2, 200)),
bb7 = rbind(c(1, 2, 200),
c(0, 1, 200)),
bb8 = rbind(c(1, 2, 200),
c(0, 0.5, 1)))
}
bounds <- sapply(family_set, function(fam) if_vec_to_matrix(get_bounds(fam)))
rotations <- is.element(family_set, family_set_rotations)
models <- cbind(family = family_set, bounds)[rep(seq_along(rotations),
ifelse(rotations, 2, 1)),]
models <- cbind(models, rotation = ifelse(duplicated(models), 180, 0))
models
fits <- apply(models, 1, function(model) {
if (model$family == "indep") {
out <- list(nll = -sum(log(ddfcop(data, prob))),
parameters = numeric(0),
npars = 0)
} else {
tmp <- tryCatch(optim(model$bounds[,2],
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B")),
error = function(e) e)
if (!any(class(tmp) == "error")) {
out <- list(nll = tmp$value,
parameters = tmp$par,
npar = length(tmp$par))
} else {
out <- list(nll = NA,
parameters = NA,
npar = NA)
}
}
return(out)
})
warnings()
-sapply(fits, function(x) x$nll)
library(mdmd)
fit <- dfcop(X)
model <- models[6,]
model
optim(model$bounds[,2],
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
nll <- function(x, family, rotation) {
print(x)
pv <- sapply(prob, function(p)
hbicop(cbind(p, rule$nodes), cond_var = 2, family, rotation, x))
-sum(log(dfcop_pdf_cpp(rule$weights, pv, data)))
}
optim(model$bounds[,2],
function(par) nll(par,
model$family,
model$rotation),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
library(mdmd)
?dfcop
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
X
fit <- dfcop(X)
fit$dist
library(mdmd)
fit <- dfcop(X)
fit$dist
lls
model <- models[2,]
optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
model
models
models <- cbind(family = family_set,
bounds = sapply(family_set, function(fam)
vec_to_matrix(get_bounds(fam))))
models <- cbind(family = family_set,
bounds = sapply(family_set, function(fam)
if_vec_to_matrix(get_bounds(fam))))
models
optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
model <- models[2,]
optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
nll <- function(x, family) {
pv <- sapply(prob, function(p)
hbicop(cbind(p, rule$nodes), cond_var = 2, family, 0, x))
-sum(log(dfcop_pdf_cpp(rule$weights, pv, data)))
}
fits <- apply(models, 1, function(model) {
if (model$family == "indep") {
out <- list(nll = -sum(log(ddfcop(data, prob))),
parameters = numeric(0),
npars = 0)
} else {
tmp <- tryCatch(optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B")),
error = function(e) e)
if (!any(class(tmp) == "error")) {
out <- list(nll = tmp$value,
parameters = tmp$par,
npar = length(tmp$par))
} else {
out <- list(nll = NA,
parameters = NA,
npar = NA)
}
}
return(out)
})
warnings()
lls <- -sapply(fits, function(x) x$nll)
lls
model <- models[nrow(models),]
model
nll <- function(x, family) {
print(x)
pv <- sapply(prob, function(p)
hbicop(cbind(p, rule$nodes), cond_var = 2, family, 0, x))
-sum(log(dfcop_pdf_cpp(rule$weights, pv, data)))
}
optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
model$bounds[,3]
model$bounds[1,3] <- 50
model
optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
model$bounds[1,3] <- 30
optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
library(mdmd)
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
warnings()
library(mdmd)
library(mdmd)
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
warnings()
library(mdmd)
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
library(mdmd)
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
?withCallingHandlers
factory <- function(fun)
function(...) {
warn <- err <- NULL
res <- withCallingHandlers(
tryCatch(fun(...), error=function(e) {
err <<- conditionMessage(e)
NULL
}), warning=function(w) {
warn <<- append(warn, conditionMessage(w))
invokeRestart("muffleWarning")
})
list(res, warn=warn, err=err)
}
.has <- function(x, what)
!sapply(lapply(x, "[[", what), is.null)
hasWarning <- function(x) .has(x, "warn")
hasError <- function(x) .has(x, "err")
isClean <- function(x) !(hasError(x) | hasWarning(x))
value <- function(x) sapply(x, "[[", 1)
cleanv <- function(x) sapply(x[isClean(x)], "[[", 1)
test <- function(i)
switch(i, "1"=stop("oops"), "2"={ warning("hmm"); i }, i)
res <- lapply(1:3, factory(test))
res
res
sapply(res, hasWarning)
lapply(res, hasWarning)
res
hasWarning(res)
library(mdmd)
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
model <- models[3,]
m
models <- cbind(family = family_set,
bounds = sapply(family_set, function(fam)
if_vec_to_matrix(get_bounds(fam))))
model <- models[3,]
model
tmp <- factory(optim(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B")))
tmp
optim_better <- factory(optim)
optim_better(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
tmp <- optim_better(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
tmp$warn
is.null(tmp$err)
fits <- apply(models, 1, function(model) {
if (model$family == "indep") {
out <- list(nll = -sum(log(ddfcop(data, prob))),
parameters = numeric(0),
npars = 0)
} else {
tmp <- optim_better(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
if (!is.null(tmp$err)) {
out <- list(nll = tmp[[1]]$value,
parameters = tmp[[1]]$par,
npar = length(tmp[[1]]$par))
} else {
out <- list(nll = NA,
parameters = NA,
npar = NA)
}
}
return(out)
})
lls <- -sapply(fits, function(x) x$nll)
sapply(fits, function(x) x$nll)
tmp <- optim_better(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
tmp
tmp[[1]]$value
is.null(tmp$err)
fits <- apply(models, 1, function(model) {
if (model$family == "indep") {
out <- list(nll = -sum(log(ddfcop(data, prob))),
parameters = numeric(0),
npars = 0)
} else {
tmp <- optim_better(model$bounds[,2],
function(par) nll(par,
model$family),
lower = model$bounds[,1]+1e-2,
upper = model$bounds[,3]-1e-2,
method = ifelse(length(model$bounds[,2]) == 1,
"Brent",
"L-BFGS-B"))
if (is.null(tmp$err)) {
out <- list(nll = tmp[[1]]$value,
parameters = tmp[[1]]$par,
npar = length(tmp[[1]]$par))
} else {
out <- list(nll = NA,
parameters = NA,
npar = NA)
}
}
return(out)
})
lls <- -sapply(fits, function(x) x$nll)
lls
library(mdmd)
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
fit
?dfcop
?predict.dfcop
# Sample size, dimension, correlation parameter
n <- 1e3
d <- 1e1
rho <- 0.7
# The model
prob <- runif(d)
dfcop <- dfcop_dist(prob, "gaussian", rho)
# Data
X <- rdfcop(n, dfcop)
# Fit
fit <- dfcop(X)
all.equal(predict(fit, X), fitted(fit))
fit
?dfcop
